#pragma checksum "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "52c8907a8fa87f9f90a26fbcffdb9efdbd5f002e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Category_Index), @"mvc.1.0.view", @"/Views/Category/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\GIC\source\repos\vindly\vindly\Views\_ViewImports.cshtml"
using vindly;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\GIC\source\repos\vindly\vindly\Views\_ViewImports.cshtml"
using vindly.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"52c8907a8fa87f9f90a26fbcffdb9efdbd5f002e", @"/Views/Category/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6981a83b23f6405f4c6e11f70fe181ef725c56ae", @"/Views/_ViewImports.cshtml")]
    public class Views_Category_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<vindly.Models.Category>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("filterForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52c8907a8fa87f9f90a26fbcffdb9efdbd5f002e3556", async() => {
                WriteLiteral(@"
    <div class=""container p-3"">
        <div class=""row pt-4"">
            <div class=""col-6"">
                <h2 class=""text-primary"">Testing List</h2>
            </div>
            <div class=""col-6"">
                <div class=""form-check form-check-inline"">
                    <input class=""form-check-input"" type=""radio"" name=""filterOption"" id=""filterAll"" value=""all"" checked>
                    <label class=""form-check-label"" for=""filterAll"">All</label>
                </div>
                <div class=""form-check form-check-inline"">
                    <input class=""form-check-input"" type=""radio"" name=""filterOption"" id=""filterPMRD"" value=""pmrd"">
                    <label class=""form-check-label"" for=""filterPMRD"">PM/RD</label>
                </div>
                <div class=""form-check form-check-inline"">
                    <input class=""form-check-input"" type=""radio"" name=""filterOption"" id=""filterUTOT"" value=""utot"">
                    <label class=""form-check-label"" for=""filterU");
                WriteLiteral(@"TOT"">UT/OT</label>
                </div>
                <button type=""submit"" class=""btn btn-primary"">Apply Filter</button>
            </div>
        </div>
        <br /><br />
        <button type=""button"" class=""btn btn-primary mb-3"" id=""exportBtn"">Export to Excel</button>
       
");
#nullable restore
#line 28 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
             if (Model.Count() > 0)
            {

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                <table id=""your-table-id"" class=""table table-bordered table-striped"" style=""width:100%"">
                    <thead>
                        <tr>
                            <th>Project Name</th>
                            <th>PM</th>
                            <th>RD</th>
                            <th>UT</th>
                            <th>OT</th>
                            <th>Total</th>
                            <th>Add</th>
                        </tr>
                    </thead>
                    <tbody>
");
#nullable restore
#line 43 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                          
                            double pmTotal = 0; // Variable to store the total of PM values
                            double rdTotal = 0;
                            double utTotal = 0;
                            double otTotal = 0;
                            double allTotal = 0;
                        

#line default
#line hidden
#nullable disable
#nullable restore
#line 50 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                         foreach (var obj in Model)
                        {
                            pmTotal += obj.PM; // Accumulate the PM value
                            rdTotal += obj.RD;
                            utTotal += obj.UT;
                            otTotal += obj.OT;
                            var total = obj.PM + obj.RD + obj.UT + obj.OT; // Calculate the total
                            allTotal += total;


#line default
#line hidden
#nullable disable
                WriteLiteral("                            <tr class=\"data-row\">\r\n                                <td width=\"30%\" class=\"project-name\">");
#nullable restore
#line 60 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                                                                Write(obj.Name);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                <td class=\"pm-value\">");
#nullable restore
#line 61 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                                                Write(obj.PM);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                <td class=\"rd-value\">");
#nullable restore
#line 62 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                                                Write(obj.RD);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                <td class=\"ut-value\">");
#nullable restore
#line 63 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                                                Write(obj.UT);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                <td class=\"ot-value\">");
#nullable restore
#line 64 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                                                Write(obj.OT);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                <td class=\"font-weight-bold total-value\">");
#nullable restore
#line 65 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                                                                    Write(total);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                                <td>\r\n                                    <a href=\"#\" class=\"btn btn-primary add-row\">+</a>\r\n                                </td>\r\n                            </tr>\r\n");
#nullable restore
#line 70 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                        }

#line default
#line hidden
#nullable disable
                WriteLiteral("                        <tr class=\"font-weight-bold\">\r\n                            <td>Total :</td>\r\n                            <td>");
#nullable restore
#line 73 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                           Write(pmTotal);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 74 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                           Write(rdTotal);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 75 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                           Write(utTotal);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 76 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                           Write(otTotal);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 77 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
                           Write(allTotal);

#line default
#line hidden
#nullable disable
                WriteLiteral("</td>\r\n                            <td></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n");
#nullable restore
#line 82 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"

            }
            else
            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                <p>No Category exists.</p>\r\n");
#nullable restore
#line 87 "C:\Users\GIC\source\repos\vindly\vindly\Views\Category\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
                WriteLiteral("        </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
<script src=""https://unpkg.com/exceljs/dist/exceljs.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js""></script>

<script>
   /*** 
    $(document).ready(function () {
        // Function to handle exporting to Excel
        function exportToExcel() {
            // Create a new Excel package
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet(""Data"");

            // Add table headers
            var headers = [""Project Name"", ""PM"", ""RD"", ""UT"", ""OT"", ""Total""];
            var headerRow = worksheet.addRow(headers);

            // Add data rows
            $("".data-row"").each(function () {
                var rowData = [
                    $(this).find("".project-name"").text(),
                    $(this).find("".pm-value"").text(),
                    $(this).find("".rd-value"").text(),
                    $(this).fin");
            WriteLiteral(@"d("".ut-value"").text(),
                    $(this).find("".ot-value"").text(),
                    $(this).find("".total-value"").text()
                ];
                worksheet.addRow(rowData);
            });

            // Auto-fit column widths
            worksheet.columns.forEach((column) => {
                column.width = 15;
            });

            // Generate a unique file name
            var fileName = ""data.xlsx"";

            // Save the workbook and trigger the download
            workbook.xlsx.writeBuffer().then(function (data) {
                var blob = new Blob([data], { type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" });
                saveAs(blob, fileName);
            });
        }

       
        // Function to handle filtering
        function applyFilter() {
            var selectedOption = $('input[name=""filterOption""]:checked').val();
            var url = ''; // Define a variable to store the URL for filtering

      ");
            WriteLiteral(@"      if (selectedOption === 'pmrd') {
                url = '/Category/filter?query=pmrd'; // Replace with the actual route for filtering by 'pmrd' query
            } else if (selectedOption === 'utot') {
                url = '/Category/filter?query=utot'; // Replace with the actual route for filtering by 'utot' query
            } else {
                url = '/Category/filter?query=all'; // Replace with the default route for displaying all data
            }

            // Make an AJAX request to fetch the filtered data
            $.ajax({
                url: url,
                method: 'GET',
                success: function (response) {
                    // Update the table with the filtered data
                    $('#your-table-id').html(response);

                    // Rebind the click event handler for the export button
                    $(""#exportBtn"").off(""click"").on(""click"", exportToExcel);
                },
                error: function (xhr, status, error) {
");
            WriteLiteral(@"                    console.log(error); // Handle any errors
                }
            });
        }

        // Bind the click event handler for the export button
        $(""#exportBtn"").click(exportToExcel);

        // Bind the form submission event handler for the filter form
        $('#filterForm').submit(function (event) {
            event.preventDefault(); // Prevent the default form submission
            applyFilter();
        });
    });
    ***/

    /***
    $(document).ready(function () {
        // Function to handle exporting to Excel
        function exportToExcel() {
            // Create a new Excel package
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet(""Data"");

            // Add table headers
            var headers = [""Project Name"", ""PM"", ""RD"", ""UT"", ""OT"", ""Total""];
            var headerRow = worksheet.addRow(headers);

            // Add data rows
            $(""#your-table-id tbody tr"").each(func");
            WriteLiteral(@"tion () {
                var rowData = [
                    $(this).find(""td:nth-child(1)"").text(),
                    $(this).find(""td:nth-child(2)"").text(),
                    $(this).find(""td:nth-child(3)"").text(),
                    $(this).find(""td:nth-child(4)"").text(),
                    $(this).find(""td:nth-child(5)"").text(),
                    $(this).find(""td:nth-child(6)"").text()
                ];
                worksheet.addRow(rowData);
            });

            // Auto-fit column widths
            worksheet.columns.forEach((column) => {
                column.width = 15;
            });

            // Generate a unique file name
            var fileName = ""data.xlsx"";

            // Save the workbook and trigger the download
            workbook.xlsx.writeBuffer().then(function (data) {
                var blob = new Blob([data], { type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" });
                saveAs(blob, fileName);
         ");
            WriteLiteral(@"   });
        }


        // Function to handle filtering
        function applyFilter() {
            var selectedOption = $('input[name=""filterOption""]:checked').val();
            var url = ''; // Define a variable to store the URL for filtering

            if (selectedOption === 'pmrd') {
                url = '/Category/filter?query=pmrd'; // Replace with the actual route for filtering by 'pmrd' query
            } else if (selectedOption === 'utot') {
                url = '/Category/filter?query=utot'; // Replace with the actual route for filtering by 'utot' query
            } else {
                url = '/Category/filter?query=all'; // Replace with the default route for displaying all data
            }

            // Make an AJAX request to fetch the filtered data
            $.ajax({
                url: url,
                method: 'GET',
                success: function (response) {
                    // Update the table with the filtered data
                    $('#");
            WriteLiteral(@"your-table-id').html(response);

                    // Rebind the click event handler for the export button
                    $(""#exportBtn"").off(""click"").on(""click"", exportToExcel);
                },
                error: function (xhr, status, error) {
                    console.log(error); // Handle any errors
                }
            });
        }

        // Bind the click event handler for the export button
        $(""#exportBtn"").click(exportToExcel);

        // Bind the form submission event handler for the filter form
        $('#filterForm').submit(function (event) {
            event.preventDefault(); // Prevent the default form submission
            applyFilter();
        });
    });
    ***/

    $(document).ready(function () {
        // Function to handle exporting to Excel
        function exportToExcel() {
            // Create a new Excel package
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet(""Data""");
            WriteLiteral(@");

            // Get the current filter option
            var selectedOption = $('input[name=""filterOption""]:checked').val();

            // Define the table headers based on the filter option
            var headers = [];
            if (selectedOption === ""pmrd"") {
                headers = [""Project Name"", ""PM"", ""RD"", ""Total""];
            } else if (selectedOption === ""utot"") {
                headers = [""Project Name"", ""UT"", ""OT"", ""Total""];
            } else {
                headers = [""Project Name"", ""PM"", ""RD"", ""UT"", ""OT"", ""Total""];
            }

            // Add table headers
            var headerRow = worksheet.addRow(headers);

            // Add data rows
            $(""#your-table-id tbody tr"").each(function () {
                var rowData = [];
                if (selectedOption === ""pmrd"") {
                    var pm = parseFloat($(this).find(""td:nth-child(2)"").text()) || 0;
                    var rd = parseFloat($(this).find(""td:nth-child(3)"").text()) || 0;
");
            WriteLiteral(@"                    var total = pm + rd;
                    rowData = [
                        $(this).find(""td:nth-child(1)"").text(),
                        pm,
                        rd,
                        total
                    ];
                } else if (selectedOption === ""utot"") {
                    var ut = parseFloat($(this).find(""td:nth-child(4)"").text()) || 0;
                    var ot = parseFloat($(this).find(""td:nth-child(5)"").text()) || 0;
                    var total = ut + ot;
                    rowData = [
                        $(this).find(""td:nth-child(1)"").text(),
                        ut,
                        ot,
                        total
                    ];
                } else {
                    var pm = parseFloat($(this).find(""td:nth-child(2)"").text()) || 0;
                    var rd = parseFloat($(this).find(""td:nth-child(3)"").text()) || 0;
                    var ut = parseFloat($(this).find(""td:nth-child(4)"").text()) || 0;
");
            WriteLiteral(@"                    var ot = parseFloat($(this).find(""td:nth-child(5)"").text()) || 0;
                    var total = pm + rd + ut + ot;
                    rowData = [
                        $(this).find(""td:nth-child(1)"").text(),
                        pm,
                        rd,
                        ut,
                        ot,
                        total
                    ];
                }
                worksheet.addRow(rowData);
            });

            // Auto-fit column widths
            worksheet.columns.forEach((column) => {
                column.width = 15;
            });

            // Generate a unique file name
            var fileName = ""data.xlsx"";

            // Save the workbook and trigger the download
            workbook.xlsx.writeBuffer().then(function (data) {
                var blob = new Blob([data], { type: ""application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"" });
                saveAs(blob, fileName);
           ");
            WriteLiteral(@" });
        }

        // Function to update table headers based on the filter option
        function updateTableHeaders(filterOption) {
            var headers = [];
            if (filterOption === ""pmrd"") {
                headers = [""Project Name"", ""PM"", ""RD"", ""Total""];
            } else if (filterOption === ""utot"") {
                headers = [""Project Name"", ""UT"", ""OT"", ""Total""];
            } else {
                headers = [""Project Name"", ""PM"", ""RD"", ""UT"", ""OT"", ""Total""];
            }

            // Clear existing header row
            $(""#your-table-id thead"").empty();

            // Add new header row
            var headerRow = $(""<tr></tr>"");
            headers.forEach(function (header) {
                headerRow.append(""<th>"" + header + ""</th>"");
            });
            $(""#your-table-id thead"").append(headerRow);
        }

        // Function to handle filtering
        function applyFilter() {
            var selectedOption = $('input[name=""filterOptio");
            WriteLiteral(@"n""]:checked').val();
            var url = """"; // Define a variable to store the URL for filtering

            if (selectedOption === ""pmrd"") {
                url = ""/Category/filter?query=pmrd""; // Replace with the actual route for filtering by 'pmrd' query
            } else if (selectedOption === ""utot"") {
                url = ""/Category/filter?query=utot""; // Replace with the actual route for filtering by 'utot' query
            } else {
                url = ""/Category/filter?query=all""; // Replace with the default route for displaying all data
            }

            // Make an AJAX request to fetch the filtered data
            $.ajax({
                url: url,
                method: ""GET"",
                success: function (response) {
                    // Update the table with the filtered data
                    $(""#your-table-id"").html(response);

                    // Update the table headers
                    updateTableHeaders(selectedOption);

              ");
            WriteLiteral(@"      // Rebind the click event handler for the export button
                    $(""#exportBtn"").off(""click"").on(""click"", exportToExcel);
                },
                error: function (xhr, status, error) {
                    console.log(error); // Handle any errors
                }
            });
        }

        // Bind the click event handler for the export button
        $(""#exportBtn"").click(exportToExcel);

        // Bind the form submission event handler for the filter form
        $(""#filterForm"").submit(function (event) {
            event.preventDefault(); // Prevent the default form submission
            applyFilter();
        });
    });


</script>










");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<vindly.Models.Category>> Html { get; private set; }
    }
}
#pragma warning restore 1591
